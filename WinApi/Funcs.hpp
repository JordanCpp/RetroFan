/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef WinAPI_Funcs_hpp
#define WinAPI_Funcs_hpp

#include "Macros.hpp"
#include "Structs.hpp"
#include "Consts.hpp"

extern "C" WINBASEAPI void   WINAPI ExitProcess(UINT uExitCode);
extern "C" WINBASEAPI HANDLE WINAPI GetStdHandle(DWORD nStdHandle);
/*********************************************************************************************
                                        Heap functions
*********************************************************************************************/
extern "C" WINBASEAPI HANDLE WINAPI HeapCreate(DWORD flOptions, SIZE_T dwInitialSize, SIZE_T dwMaximumSize);
extern "C" WINBASEAPI BOOL   WINAPI HeapDestroy(HANDLE hHeap);
extern "C" WINBASEAPI LPVOID WINAPI HeapAlloc(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes);
extern "C" WINBASEAPI BOOL   WINAPI HeapFree(HANDLE hHeap, DWORD dwFlags, LPVOID lpMem);
/*********************************************************************************************
                                        Console functions
*********************************************************************************************/
extern "C" WINBASEAPI BOOL   WINAPI WriteConsoleA(HANDLE hConsoleOutput, const void* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID lpReserved);
/*********************************************************************************************
                                        File functions
*********************************************************************************************/
extern "C" WINBASEAPI HANDLE WINAPI CreateFileA(LPCSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode, LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes, HANDLE hTemplateFile);
extern "C" WINBASEAPI BOOL   WINAPI CloseHandle(HANDLE hObject);
extern "C" WINBASEAPI BOOL   WINAPI ReadFile(HANDLE hFile, LPVOID lpBuffer, DWORD nNumberOfBytesToRead, LPDWORD lpNumberOfBytesRead, LPOVERLAPPED lpOverlapped);
/*********************************************************************************************
                                        GUI functions
*********************************************************************************************/
extern "C" WINBASEAPI ATOM    WINAPI RegisterClassA(const WNDCLASSA* lpWndClass);
extern "C" WINBASEAPI HWND    WINAPI CreateWindowExA(DWORD dwExStyle, LPCSTR lpClassName, LPCSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
extern "C" WINBASEAPI BOOL    WINAPI ShowWindow(HWND hWnd, int nCmdShow);
extern "C" WINBASEAPI BOOL    WINAPI UpdateWindow(HWND hWnd);
extern "C" WINBASEAPI BOOL    WINAPI GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
extern "C" WINBASEAPI BOOL    WINAPI TranslateMessage(const MSG* lpMsg);
extern "C" WINBASEAPI LRESULT WINAPI DispatchMessageA(const MSG* lpMsg);
extern "C" WINBASEAPI void    WINAPI PostQuitMessage(int nExitCode);
extern "C" WINBASEAPI HMODULE WINAPI GetModuleHandleA(LPCSTR lpModuleName);
extern "C" WINBASEAPI LRESULT WINAPI DefWindowProcA(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
/*********************************************************************************************
                                        Draw functions
*********************************************************************************************/
extern "C" WINBASEAPI HDC     WINAPI BeginPaint(HWND hwnd, LPPAINTSTRUCT lpPaint);
extern "C" WINBASEAPI BOOL    WINAPI EndPaint(HWND hWnd, const PAINTSTRUCT* lpPaint);
extern "C" WINBASEAPI BOOL    WINAPI MoveToEx(HDC hdc, int x, int y, LPPOINT lppt);
extern "C" WINBASEAPI BOOL    WINAPI LineTo(HDC hdc, int x, int y);
extern "C" WINBASEAPI int     WINAPI FillRect(HDC hDC, const RECT* lprc, HBRUSH hbr);
extern "C" WINBASEAPI HBRUSH  WINAPI CreateSolidBrush(COLORREF color);
extern "C" WINBASEAPI BOOL    WINAPI DeleteObject(HGDIOBJ ho);

extern "C" WINBASEAPI LONG     WINAPI GetWindowLongA(HWND hWnd, int  nIndex);
extern "C" WINBASEAPI LONG_PTR WINAPI GetWindowLongPtrA(HWND hWnd,int  nIndex);
extern "C" WINBASEAPI BOOL     WINAPI PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, UINT wRemoveMsg);

extern "C" WINBASEAPI BOOL     WINAPI InvalidateRect(HWND hWnd, const RECT* lpRect, BOOL bErase);

#endif
